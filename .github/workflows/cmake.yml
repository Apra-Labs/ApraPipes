name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo
  SUBMODS_TXT: submodule_ver.txt
  
jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with: 
        submodules: 'true'
    - name: Compute submodule status
      working-directory: ${{github.workspace}}/thirdparty
      run: (git submodule status > ${{env.SUBMODS_TXT}}) && (cat ${{env.SUBMODS_TXT}})
    
    - name: Cache thirdparty
      id: cache-thirdparty
      uses: actions/cache@v2
      env:
        cache-name: cache-thirdparty
      with:
          # thirdparty stuff is in thirdparty folder
          path: ${{github.workspace}}/thirdparty
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('thirdparty/${{env.SUBMODS_TXT}}') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-
          
    - name: Cache hunter 
      id: cache-hunter
      uses: actions/cache@v2
      env:
        cache-name: cache-hunter
      with:
          # hunter cache files are stored in `~/.hunter` on Linux
          path: ~/.hunter
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('cmake/config.cmake', 'base/CMakeLists.txt') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-
    
    - name: Install yasm
      if: steps.cache-thirdparty.outputs.cache-hit != 'true'
      run: sudo apt-get install -y yasm
    
    - name: Build FFMPEG
      if: steps.cache-thirdparty.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/thirdparty/ffmpeg
      run: (./configure --enable-pic) && (make)
      
    - name: Build ZXING
      if: steps.cache-thirdparty.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/thirdparty/zxing-cpp
      run: (chmod +x build.sh) && (./build.sh)
  
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DENABLE_CUDA=OFF ./base

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      run: build/aprapipesut --log_format=JUNIT --log_sink=CI_test_result.xml
    
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v2
      with:
       name: Unit Test Results
       path: |
         CI_test_result.xml
    
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v1
      if: always()
      with:
        files: CI_test_result.xml

  event_file:
    name: "Event File"
    runs-on: ubuntu-latest
    steps:
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: Event File
          path: ${{ github.event_path }}
          
