on:
  workflow_call:
    inputs:
      runner:
        type: string
        description: 'runner where this job will run'
        default: 'windows-2019'
        required: false
      flav: 
        type: string
        description: 'flavour of the build: windows/linux_x64/linux_arm64'
        default: 'Windows'
        required: false
      is-selfhosted: 
        type: boolean
        description: 'self hosted runners do not need to use cache'
        default: false
        required: false
      skip-test: 
        type: boolean
        description: 'should test steps be skipped'
        default: false
        required: false
      cuda: 
        type: string
        description: 'ON/OFF based on this runner support cuda'
        default: 'OFF'
        required: false
      prep-cmd:
        type: string
        description: 'commands required to be run on a builder to prep it for build'
        default: 'pip3 install ninja && pip3 install meson && choco feature enable -n allowEmptyChecksums && choco install pkgconfiglite'
        required: false
      bootstrap-cmd:
        type: string
        description: 'commands required to boot strap builder after code checkout'
        default: './vcpkg/bootstrap-vcpkg.bat && ./vcpkg/vcpkg.exe integrate install'
        required: false
      is-prep-phase:
        type: boolean
        description: 'this workflow is called for a prep phase: it will split vcpkg install into 2 portions to cache and save'
        default: false
        required: false
      cache-path:
        type: string
        description: 'the folder which needs to be cached e.g. .cache/vcpkg'
        default: ${{ 'C:\Users\runneradmin\AppData\Local\vcpkg\archives' }}
        required: false
      cmake-conf-cmd:
        type: string
        description: 'command needed for installing and configuring cmake'
        default: 'cmake -B . -DENABLE_WINDOWS=ON -DENABLE_LINUX=OFF -A x64 ../base'
        required: false
      nProc:
        type: number
        description: 'number of threads to be used by cmake/make'
        default: 3
        required: false
      nTestTimeoutMins:
        type: number
        description: 'number of threads to be used by cmake/make'
        default: 15
        required: false        
jobs:
  build:
    runs-on: ${{ inputs.runner }}
    defaults:
      run:
        shell: cmd  
    steps:
    - name: Prepare builder
      run: ${{ inputs.prepcmd }} 
    
    - name: Checkout code
      uses: actions/checkout@v2
      with: 
        submodules: 'false'

    - name: Checkout submodule and lfs
      run: |
        git submodule update --init --recursive 
        git submodule status > submodule_ver.txt
        git lfs checkout
    
    - name: Run VCPKG bootstrap
      run: ${{ inputs.bootsrapcmd }}

    - name: Remove OpenCV from vcpkg during prep phase
      if: is-prep-phase
      working-directory: ${{github.workspace}}/base
      run: .\fix-vcpkg-json.ps1 -removeOpenCV
      shell: pwsh

    - name: Cache dependencies for fast cloud build
      if: ${{ !inputs.is-selfhosted }}
      id: cache-all
      uses: actions/cache@v2
      with:
          path: |
            ${{ inputs.cache-path }}
            ${{ github.workspace }}/thirdparty/libmp4/build
          key:  ${{ inputs.flav }}-${{ hashFiles( 'base/vcpkg.json', 'vcpkg/baseline.json', 'submodule_ver.txt') }}
          restore-keys: ${{ inputs.flav }}-
    
    - name: Build libmp4
      working-directory: ${{github.workspace}}/thirdparty/libmp4
      run: ./build.cmd

    - name: Make build folder
      run: mkdir -p build
      continue-on-error: true

    - name: Configure CMake Common
      working-directory: ${{github.workspace}}/build
      run: ${{ inputs.cmake-conf-cmd }} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -j ${{ inputs.nProc }} -DENABLE_CUDA=${{inputs.cuda}} -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake 
      continue-on-error: ${{inputs.is-prep-phase}} # in prep phase we expect an error here due to missing OpenCV

    - name: Build
      if: ${{!inputs.is-prep-phase}}
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config ${{env.BUILD_TYPE}} -j ${{ inputs.nProc }}
    
    - name: Verify contents of Debug and Release
      if: ${{!inputs.is-prep-phase}}
      working-directory: ${{github.workspace}}/build/
      run: dir ${{env.BUILD_TYPE}}
    
    - name: Test
      if: ${{!inputs.is-prep-phase && !inputs.skip-test}}
      run: build/${{env.BUILD_TYPE}}/aprapipesut --log_format=JUNIT --log_sink=CI_test_result_${{inputs.flav}}.xml -p -l all
      timeout-minutes: ${{ inputs.nTestTimeoutMins}}
    
    - name: Upload Test Results
      if: ${{!inputs.is-prep-phase}}
      uses: actions/upload-artifact@v2
      with:
        name: TestResults_${{ inputs.flav }}
        path: |
          ${{ CI_test_result_${{inputs.flav}}.xml }}

    - name: Upload build logs 
      if:  ${{ failure() }} # only upload logs when we have a fialure above
      uses: actions/upload-artifact@v3
      with:
        name: BuildLogs_${{ inputs.flav }}
        path: |
          ${{ github.workspace }}/vcpkg/buildtrees/**/*.log
          ${{ github.workspace }}/vcpkg/buildtrees/**/*.txt



