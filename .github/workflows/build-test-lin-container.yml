on:
  workflow_call:
    inputs:
      runner:
        type: string
        description: 'runner where this job will run'
        required: true
      flav: 
        type: string
        description: 'flavour of the build: Windows/linux_x64/linux_arm64'
        required: true
      buildConf:
        type: string
        description: 'build configuration e.g. Release/Debug etc.'
        default: 'RelWithDebInfo'
        required: false
      is-selfhosted: 
        type: boolean
        description: 'self hosted runners do not need to use cache'
        required: true
      skip-test: 
        type: boolean
        description: 'should test steps be skipped'
        default: false
        required: false
      cuda: 
        type: string
        description: 'ON/OFF based on this runner support cuda'
        required: true
      prep-cmd:
        type: string
        description: 'commands required to be run on a builder to prep it for build'
        default: 'apt-get update -qq && apt-get -y install ca-certificates curl zip unzip tar autoconf automake autopoint build-essential flex git-core git-lfs libass-dev libfreetype6-dev libgnutls28-dev libmp3lame-dev libsdl2-dev libtool libsoup-gnome2.4-dev libva-dev libvdpau-dev libvorbis-dev libxdamage-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev libx11-dev libxft-dev libxext-dev libncurses5-dev libncursesw5-dev ninja-build pkg-config texinfo wget apt-transport-https software-properties-common yasm zlib1g-dev nasm gperf bison python3 python3-pip dos2unix libx11-dev libgles2-mesa-dev libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev python3-jinja2 libssl-dev libssl1.1 && pip3 install meson && pip3 install Jinja2 && pip3 install cmake==3.29.6 && wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | apt-key add - && add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/ubuntu/$(lsb_release -rs)/prod $(lsb_release -cs) main" && apt-get update && apt-get install -y powershell'
        required: false
      prep-check-cmd:
        type: string
        description: 'command to check if the builder is ready'
        default: 'cmake --version ; ninja --version ; gcc --version ; git --version; pwsh --version ||true '
        #pwsh is required on self hosted runners: see here: https://learn.microsoft.com/en-us/powershell/scripting/install/install-other-linux?view=powershell-7.2#installation-using-a-binary-archive-file     
        required: false
      bootstrap-cmd:
        type: string
        description: 'commands required to boot strap builder after code checkout'
        default: './vcpkg/bootstrap-vcpkg.sh'
        required: false
      is-prep-phase:
        type: boolean
        description: 'this workflow is called for a prep phase: it will split vcpkg install into 2 portions to cache and save'
        default: false
        required: false
      cache-path:
        type: string
        description: 'the folder which needs to be cached e.g. .cache/vcpkg'
        default: ${{ '~/.cache/vcpkg/archives' }}
        required: false
      cmake-conf-cmd:
        type: string
        description: 'command needed for installing and configuring cmake'
        default: 'PATH=/usr/local/cuda/bin:$PATH ; cmake -B . -DENABLE_WINDOWS=OFF -DENABLE_LINUX=ON ../base'
        required: false
      nProc:
        type: number
        description: 'number of threads to be used by cmake/make'
        default: 6
        required: false
      nTestTimeoutMins:
        type: number
        description: 'number of mins of timeout for tests run'
        default: 20
        required: false        
jobs:
  build:
    env:
      TEST_EXE: build/aprapipesut
      CMAKE_TC_FILE: '../vcpkg/scripts/buildsystems/vcpkg.cmake' # Note: naming this variable as CMAKE_TOOLCHAIN_FILE can cause havoc!!!
    container: 
      image: nvidia/cuda:11.8.0-cudnn8-devel-ubuntu20.04
      options: --user root --env DEBIAN_FRONTEND=noninteractive
    defaults:
      run:
        shell: bash  
    runs-on: ${{ inputs.runner }}
    steps:
    - name: Prepare builder
      run: |
        ${{ inputs.prep-cmd }} 
        ${{ inputs.prep-check-cmd }} 
    
    - name: Check builder for CUDA
      if: ${{ contains(inputs.cuda,'ON')}} 
      run: |
        (PATH=/usr/local/cuda/bin:$PATH && nvcc --version) || echo 'please install cuda and add /usr/local/cuda/bin into path'
        test -f /usr/include/cudnn.h || echo 'install cudnn as described in the readme.md' # Note: on nvidia supplied image, cudnn is already installed in /usr/include

    - name: Cleanup workspace on self hosted runners
      if: inputs.is-selfhosted
      run: 'Remove-Item -Recurse -Force *'
      shell: pwsh
      continue-on-error: true

    - name: Checkout code
      uses: actions/checkout@v3
      with: 
        submodules: 'recursive' 
        lfs: true
        fetch-depth: 0
        
    - name: List Submodules
      run: |
        git config --global --add safe.directory "*"
        git submodule status > submodule_ver.txt
        cat submodule_ver.txt
        git rev-list --all --count 

    - name: Run VCPKG bootstrap
      run: ${{ inputs.bootstrap-cmd }}

    - name: Remove CUDA from vcpkg if we are in nocuda
      if: ${{ contains(inputs.cuda,'OFF')}} 
      working-directory: ${{github.workspace}}/base
      run: .\fix-vcpkg-json.ps1 -removeCUDA
      shell: pwsh

    - name: Remove OpenCV from vcpkg during prep phase
      if: inputs.is-prep-phase
      working-directory: ${{github.workspace}}/base
      run: .\fix-vcpkg-json.ps1 -removeOpenCV
      shell: pwsh

    # - name: cache init on container build
    #   if: ${{ job.container != null }} # we are running on a cloud hosted container... move the cache "initially"
    #   run: |
    #     cp -R /root/.cache /github/home/ || true
    #     ls ${{ inputs.cache-path }} || true
    #   continue-on-error: true

    - name: Cache dependencies for fast cloud build
      id: cache-all
      uses: actions/cache@v3
      with:
          path: |
            ${{ inputs.cache-path }}
          key:  ${{ inputs.flav }}-4-${{ hashFiles( 'base/vcpkg.json', 'vcpkg/baseline.json', 'submodule_ver.txt') }}
          restore-keys: ${{ inputs.flav }}-
    
    - name: Make build folder
      run: mkdir -p build
      continue-on-error: true

    - name: Configure CMake Common
      working-directory: ${{github.workspace}}/build
      run: '${{ inputs.cmake-conf-cmd }} -DCMAKE_TOOLCHAIN_FILE=${{env.CMAKE_TC_FILE}} -DCMAKE_BUILD_TYPE=${{inputs.buildConf}} -DENABLE_CUDA=${{inputs.cuda}}'
      continue-on-error: ${{inputs.is-prep-phase}} # in prep phase we expect an error here due to missing OpenCV
    - name: Remove files not needed for the build
      if: ${{!inputs.is-selfhosted}} # we have space crunch on hosted builder only
      working-directory: ${{github.workspace}}
      run: remove-item vcpkg/downloads -Recurse -Force && remove-item * -Recurse -Force -Include *.pdb,*.ilk
      shell: pwsh
      continue-on-error: true


    - name: Build
      if: ${{!inputs.is-prep-phase}}
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config ${{inputs.buildConf}} -j ${{ inputs.nProc }}

    - name: List Test cases
      if: ${{!inputs.is-prep-phase}}
      run: |
        ldd ${{env.TEST_EXE}} | tee >(grep 'not found') || true
        ${{env.TEST_EXE}} --list_content > tests.txt || true
      timeout-minutes: 1

    - name: Run Tests
      if: ${{!inputs.is-prep-phase && !inputs.skip-test}}
      run: |
        ${{env.TEST_EXE}} --log_format=JUNIT --log_sink=CI_test_result_${{inputs.flav}}.xml -p -l all || echo 'test execution returned error'
      timeout-minutes: ${{ inputs.nTestTimeoutMins}}
    
    - name: Upload Test Results
      if: ${{ always() }}
      continue-on-error: true
      uses: actions/upload-artifact@v4
      with:
        name: TestResults_${{ inputs.flav }}
        path: |
          CI_test_result_${{inputs.flav}}.xml
          ${{ github.workspace }}/data/SaveOrCompareFail/**
      

    - name: Upload build logs 
      if:  ${{ always() }} # only upload logs when we have a failure above
      uses: actions/upload-artifact@v4
      with:
        name: BuildLogs_${{ inputs.flav }}
        path: |
          ${{ github.workspace }}/vcpkg/buildtrees/**/*.log
          ${{ github.workspace }}/vcpkg/buildtrees/**/*.txt
          ${{ github.workspace }}/vcpkg_installed/vcpkg/*



