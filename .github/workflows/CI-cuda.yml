name: CI_Cuda

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  
jobs:
  build:
    runs-on: ubuntu-20.04
    container:
      image: ghcr.io/kumaakh/aprapipes-build-x86-ubutu18.04-cuda:latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04-cuda]
        include:
          - os: ubuntu-20.04-cuda
            BUILDER_PREP_CMD: "cmake --version && ninja --version && gcc --version && meson --version && nvcc --version && git --version"
            VCPKG_BOOTSTRAP_CMD: "./vcpkg/bootstrap-vcpkg.sh"
            GST_BUILD_SCRIPT: "thirdparty/build_gstreamer.sh"
            GST_BUILD_COMMAND: "sh build_gstreamer.sh"
            CACHE_PATH: ".cache/vcpkg/archives"
            FLAV: "Linux-Cuda"
            VCPKG_FILE: "base/vcpkg.cuda.json"
            CMAKE-CONF: "cmake -B . -DENABLE_CUDA=ON ../base"
            NPROC: 3
            SHELL: "bash"
    env:
      BUILD_TYPE: RelWithDebInfo
      CACHE_REST_KEY: ${{ matrix.FLAV }}-build-cache-vcpkg
      TEST_RES_XML: CI_test_result_${{ matrix.FLAV }}.xml
      GST_BUILD_SHELL: ${{ matrix.SHELL }}
      ISCUDA: ${{ contains(matrix.os, 'cuda') }}
      TESTEXE: build/aprapipesut

    steps:
      - name: Install build dependencies in cloud hosted env
        run: ${{ matrix.BUILDER_PREP_CMD }}

      - name: Checkout code
        uses: actions/checkout@v3
        with: 
          submodules: 'false'
          lfs: 'true'

      - name: Checkout submodule
        run: |
          git submodule update --init --recursive 
          git submodule status > submodule_ver.txt

      - name: Run VCPKG bootstrap
        run: ${{ matrix.VCPKG_BOOTSTRAP_CMD }}

      - name: Cache dependencies for fast cloud build
        id: cache-all
        if: runner.arch != 'ARM64' # let's not cache from self hosted runner as it is caching anyways
        uses: actions/cache@v2
        with:
            path: |
              /github/home/${{ matrix.CACHE_PATH }}
              thirdparty/gst-build/gst-build-1.16/outInstall/
            key:  ${{ env.CACHE_REST_KEY }}-${{ hashFiles( matrix.VCPKG_FILE, matrix.GST_BUILD_SCRIPT, 'base/CMakeLists.txt', 'vcpkg/baseline.json', 'submodule_ver.txt') }}
            restore-keys: ${{ env.CACHE_REST_KEY }}-

      - name: Build Gstreamer
        if: ${{ runner.arch != 'ARM64' && steps.cache-all.outputs.cache-hit != 'true' }}
        working-directory: ${{github.workspace}}/thirdparty
        run: |
          ls gst-build/gst-build-1.16/outInstall || true
          ${{matrix.GST_BUILD_COMMAND}}

      - name: Build libmp4
        working-directory: ${{github.workspace}}/thirdparty/libmp4
        run: sh build.cmd

      - name: cache init
        run: |
          cp -R /root/.cache /github/home/ || true
          ls /github/home/.cache/vcpkg/archives || true
          ls thirdparty/gst-build/gst-build-1.16/outInstall || true
        continue-on-error: true

      - name: Make build folder
        run: mkdir -p build
        continue-on-error: true

      - name: Configure CMake Common
        working-directory: ${{github.workspace}}/build
        run: |
          cp -f ../${{matrix.VCPKG_FILE}} ../base/vcpkg.json
          ${{ matrix.CMAKE-CONF }} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DGHA=ON -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
        continue-on-error: false

      - name: Build
        working-directory: ${{github.workspace}}/build
        run: cmake --build . --config ${{env.BUILD_TYPE}} -j ${{ matrix.NPROC }}
        continue-on-error: false

      - name: Verify contents of our build
        working-directory: ${{github.workspace}}/build/
        run: dir *
        continue-on-error: false

      - name: Override TESTEXE for windows
        if: runner.os == 'Windows'
        run: |
          echo on ${{ runner.os }} change the test exe to ${{env.TESTEXE}}
          echo "TESTEXE=${{env.TESTEXE}}" >> $GITHUB_ENV
        env:
          TESTEXE: build/${{env.BUILD_TYPE}}/aprapipesut.exe

      - name: List test cases
        env:
          LD_LIBRARY_PATH: ${{github.workspace}}/thirdparty/gst-build/gst-build-1.16/outInstall/lib/x86_64-linux-gnu:/usr/local/cuda-10.2/compat/:/usr/local/cuda/lib64:$LD_LIBRARY_PATH
        run: |
          ${{ env.TESTEXE }} --list_content > tests.txt
        continue-on-error: false

      - name: Test
        if: ${{ env.ISCUDA != 'true'}}
        env:
          LD_LIBRARY_PATH: ${{github.workspace}}/thirdparty/gst-build/gst-build-1.16/outInstall/lib/x86_64-linux-gnu:/usr/local/cuda-10.2/compat/:/usr/local/cuda/lib64:$LD_LIBRARY_PATH
        run: |
          ${{ env.TESTEXE }} --log_level=all --log_format=JUNIT --log_sink=${{ env.TEST_RES_XML }}
        timeout-minutes: 10
        continue-on-error: false

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: TestResults_${{ matrix.FLAV }}
          path: |
            tests.txt
#            ${{ env.TEST_RES_XML }}

      - name: Upload build logs 
        if:  ${{ failure() }} # only upload logs when we have a failure above
        uses: actions/upload-artifact@v2
        with:
          name: BuildLogs_${{ matrix.FLAV }}
          path: |
            ${{ github.workspace }}/build/**/*.log
            ${{ github.workspace }}/build/**/*.txt
            ${{ github.workspace }}/vcpkg/buildtrees/**/*.log
            ${{ github.workspace }}/vcpkg/buildtrees/**/*.txt
  
  # publish-test-results:
  #   name: "Publish Unit Tests Results"
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: always()

  #   steps:
  #     - name: Download Artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         path: artifacts

  #     - name: Display structure of downloaded files
  #       working-directory: artifacts
  #       run: ls -R
  #       continue-on-error: true

  #     - name: Publish Unit Test Results
  #       uses: EnricoMi/publish-unit-test-result-action@v1
  #       with:
  #         files: artifacts/*/CI_test_result_*.xml
  #       continue-on-error: true
