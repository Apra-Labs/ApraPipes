name: CI_Win_CUDA

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  
jobs:
  build:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: pwsh
    strategy:
      fail-fast: false
      matrix:
        os: [windows-cuda]
        include:
          - os: windows-cuda
            BUILDER_PREP_CMD: "choco feature enable -n allowEmptyChecksums && choco install 7zip git python3 cmake pkgconfiglite -y && pip3 install ninja && pip3 install meson" #self hosted builder needs more setup
            VCPKG_BOOTSTRAP_CMD: "./vcpkg/bootstrap-vcpkg.bat && ./vcpkg/vcpkg.exe integrate install"
            FLAV: "Windows-cuda"
            VCPKG_FILE: "base/vcpkg.cuda.json"
            CMAKE-CONF: "cmake -B . -DENABLE_CUDA=ON -DENABLE_WINDOWS=ON -DENABLE_LINUX=OFF -A x64 ../base"
            NPROC: 6
            SHELL: "cmd"
    env:
      BUILD_TYPE: RelWithDebInfo
      TEST_RES_XML: CI_test_result_${{ matrix.FLAV }}.xml

    steps:
    - name: Install build dependencies in cloud hosted env
      run: ${{ matrix.BUILDER_PREP_CMD }}
    
    - name: Checkout code
      uses: actions/checkout@v3
      with: 
        clean: 'false'
        submodules: 'false'
        lfs: 'true'

    - name: Checkout submodule and LFS
      run: |
        git submodule update --init --recursive 
        git submodule status > submodule_ver.txt
        git lfs checkout
      
    - name: Run VCPKG bootstrap
      run: ${{ matrix.VCPKG_BOOTSTRAP_CMD }}

    
    - name: Build libmp4
      working-directory: ${{github.workspace}}/thirdparty/libmp4
      run: .\build.cmd
      shell: cmd

    - name: Make build folder
      run: mkdir -p build
      continue-on-error: true

    - name: Configure CMake Common
      working-directory: ${{github.workspace}}/build
      run: |
        copy ../${{matrix.VCPKG_FILE}} ../base/vcpkg.json
        ${{ matrix.CMAKE-CONF }} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DGHA=ON -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake
      continue-on-error: false
      
    - name: Build
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config ${{env.BUILD_TYPE}} -j ${{ matrix.NPROC }}
      continue-on-error: false
      
    - name: Verify contents of Debug and Release in windows
      working-directory: ${{github.workspace}}/build/
      run: dir ${{env.BUILD_TYPE}}
      continue-on-error: false
    
    - name: Test Windows 
      run: build/${{env.BUILD_TYPE}}/aprapipesut --log_format=JUNIT --log_sink=${{ env.TEST_RES_XML }} -p -l all
      timeout-minutes: 15
      continue-on-error: false
    
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: TestResults_${{ matrix.FLAV }}
        path: |
          ${{ env.TEST_RES_XML }}

    # - name: Upload build logs 
    #   if:  ${{ failure() }} # only upload logs when we have a fialure above
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: BuildLogs_${{ matrix.FLAV }}
    #     path: |
    #       ${{ github.workspace }}/vcpkg/buildtrees/**/*.log
    #       ${{ github.workspace }}/vcpkg/buildtrees/**/*.txt
  
  publish-test-results:
    name: "Publish Unit Tests Results"
    needs: build
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
    if: always()
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Display structure of downloaded files
        working-directory: artifacts
        run: ls -R
      - name: Publish Windows_x64_Cuda Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        id: test-results-win-x64-cuda
        with:
          junit_files: artifacts/*/CI_test_result_*.xml
          check_name: Windows_x64 Cuda Test Results
      - name: Set badge color
        shell: bash
        run: |
          case ${{ fromJSON( steps.test-results-win-x64.outputs.json ).conclusion }} in
            success)
              echo "BADGE_COLOR=31c653" >> $GITHUB_ENV
              ;;
            failure)
              echo "BADGE_COLOR=800000" >> $GITHUB_ENV
              ;;
            neutral)
              echo "BADGE_COLOR=696969" >> $GITHUB_ENV
              ;;
          esac
      - name: Create badge
        uses: emibcn/badge-action@v1.2.4
        with:
          label: Tests
          status: '${{ fromJSON( steps.test-results-win-x64.outputs.json ).formatted.stats.tests }} tests, ${{ fromJSON( steps.test-results-win-x64.outputs.json ).formatted.stats.runs }} runs: ${{ fromJSON( steps.test-results-win-x64.outputs.json ).conclusion }}'
          color: ${{ env.BADGE_COLOR }}
          path: badge_winx64_cuda.svg
      - name: Upload badge to Gist
        # Upload only for main branch
        if: >
          github.event_name == 'workflow_run' && github.event.workflow_run.head_branch == 'main' ||
          github.event_name != 'workflow_run' && github.ref == 'refs/heads/main'
        uses: andymckay/append-gist-action@1fbfbbce708a39bd45846f0955ed5521f2099c6d
        with:
          token: ${{ secrets.GIST_TOKEN }}
          gistURL: https://gist.githubusercontent.com/kumaakh/f80af234a4aabedc69af3ee197f66944
          file: badge_winx64_cuda.svg