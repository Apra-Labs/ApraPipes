# addons:
#   apt:
#     packages:
#       - g++-7
# env:
#   - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"
        
matrix:
  include:
    - name: CUDA 10
      env:
      - CUDA=10.2.89-1
      - CUDA_SHORT=10.2
      - UBUNTU_VERSION=ubuntu1804
      dist: Bionic
#/////add focal if not works 

# addons:  /////add if not works
#   apt:
#     packages:
#       - nvidia-common
#       - nvidia-cuda-toolkit
#       - nvidia-cuda-dev
      
cache:
  timeout: 1000
  ccache: true
  directories: 
    - $HOME/.hunter
    - $HOME/thirdparty
#     - $HOME/build/yashrajsingh1998/ApraPipes/_build

before_install:
  
  - sudo pip install awscli
  - aws --version
  - aws s3 cp s3://apralabs-travis/Video_Codec_SDK_10.0.26.zip ./
  - unzip Video_Codec_SDK_10.0.26.zip -d thirdparty
  
  - wget -O cmake.sh https://cmake.org/files/v3.14/cmake-3.14.1-Linux-x86_64.sh
  - sudo sh cmake.sh --skip-license --exclude-subdir --prefix=/usr/local
  - export PATH=/usr/local/bin:$PATH
  - cmake --version 


#-------------------------------------------------------------
  - sudo apt-get update -y
  - sudo apt install -y yasm 
  
  - cd thirdparty/ffmpeg
  - ./configure --enable-pic
  - make -j"$(nproc)"
  - cd ..
  - cd ..
#-------------------------------------------------------------------add   
  
  
  - INSTALLER=cuda-repo-${UBUNTU_VERSION}_${CUDA}_amd64.deb
  - wget http://developer.download.nvidia.com/compute/cuda/repos/${UBUNTU_VERSION}/x86_64/${INSTALLER}
  - sudo dpkg -i ${INSTALLER}
  - wget https://developer.download.nvidia.com/compute/cuda/repos/${UBUNTU_VERSION}/x86_64/7fa2af80.pub
  - sudo apt-key add 7fa2af80.pub
  - sudo apt update -qq
  - sudo apt install -y cuda-toolkit-${CUDA_SHORT/./-} cuda-core-${CUDA_SHORT/./-} cuda-cudart-dev-${CUDA_SHORT/./-} cuda-cufft-dev-${CUDA_SHORT/./-}
  - sudo apt clean
  - CUDA_HOME=/usr/local/cuda-${CUDA_SHORT}
  - LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}
  - PATH=${CUDA_HOME}/bin:${PATH}
  - ls /usr/local/cuda-10.2/bin
  - ls /usr/local/cuda-10.2
  - ls /usr/local/cuda-10.2/include
#----------------------------------------------------------------------------------add






#   - INSTALLER=cuda-repo-${UBUNTU_VERSION}_${CUDA}_amd64.deb
#   - wget http://developer.download.nvidia.com/compute/cuda/repos/${UBUNTU_VERSION}/x86_64/${INSTALLER}
#   - sudo dpkg -i ${INSTALLER}
#   - wget https://developer.download.nvidia.com/compute/cuda/repos/${UBUNTU_VERSION}/x86_64/7fa2af80.pub
#   - sudo apt-key add 7fa2af80.pub
#   - sudo apt update -qq
#   - sudo apt install -y cuda-core-${CUDA_SHORT/./-} cuda-cudart-dev-${CUDA_SHORT/./-} cuda-cufft-dev-${CUDA_SHORT/./-}
#   - sudo apt clean
#   - CUDA_HOME=/usr/local/cuda-${CUDA_SHORT}
#   - LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}
#   - PATH=${CUDA_HOME}/bin:${PATH}
#   - PATH=${PATH}:${PWD}
  
#   - nvcc --version 
#   - if [ $USE_NVML -eq 1 ]; then wget $NVML_LINK$NVML_FILE && chmod u+x $NVML_FILE && sudo ./$NVML_FILE --silent --installdir=/ ; fi
#   - if [ $USE_NVML -eq 1 ]; then export CMAKE_PREFIX_PATH=/usr/src/gdk/nvml/lib/ ; fi
#   - sudo find /usr/ -name libcuda*.so
#   - sudo find /usr/ -name nvml.h
#   - sudo find /usr/ -name nppdefs.h
#   - sudo find /usr/ -name libnvidia*.so
#   - sudo find /usr/ -name libnvml*.so
  
# install:    
# #   # first we create a directory for the CMake binaries
# #   - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
# #   - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
# #   # we use wget to fetch the cmake binaries
# #   - travis_retry wget --no-check-certificate https://cmake.org/files/v3.3/cmake-3.3.2-Linux-x86_64.tar.gz
# #   # this is optional, but useful:
# #   # do a quick md5 check to ensure that the archive we downloaded did not get compromised
# #   - echo "f3546812c11ce7f5d64dc132a566b749 *cmake-3.3.2-Linux-x86_64.tar.gz" > cmake_md5.txt
# #   - md5sum -c cmake_md5.txt
# #   # extract the binaries; the output here is quite lengthy,
# #   # so we swallow it to not clutter up the travis console
# #   - tar -xvf cmake-3.3.2-Linux-x86_64.tar.gz > /dev/null
# #   - mv cmake-3.3.2-Linux-x86_64 cmake-install
# #   # add both the top-level directory and the bin directory from the archive
# #   # to the system PATH. By adding it to the front of the path we hide the
# #   # preinstalled CMake with our own.
# #   - PATH=${DEPS_DIR}/cmake-install:${DEPS_DIR}/cmake-install/bin:$PATH
# #   # don't forget to switch back to the main build directory once you are done
# #   - cd ${TRAVIS_BUILD_DIR}
# #   - choco upgrade cmake
#   - sudo apt upgrade cmake
  
script:
  - ./build_linux_x64.sh

  

